package com.mcmatica.entity.webui.spring;

import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.Iterator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.annotation.Id;
import org.springframework.data.mapping.model.MappingException;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.mapping.DBRef;
import org.springframework.data.mongodb.core.mapping.event.AbstractMongoEventListener;
import org.springframework.data.mongodb.core.mapping.event.BeforeConvertEvent;
import org.springframework.util.ReflectionUtils;

import com.mcmatica.entity.webui.annotation.MCCascadeSave;
import com.mcmatica.entity.webui.model.BaseEntityModel;

public class CascadingMongoEventListener extends AbstractMongoEventListener<BaseEntityModel> {

	@Autowired
	private MongoOperations mongoOperations;

	@Override
	public void onBeforeConvert(final BeforeConvertEvent<BaseEntityModel> source) {
		ReflectionUtils.doWithFields(source.getSource().getClass(), new ReflectionUtils.FieldCallback() {

			public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {
				ReflectionUtils.makeAccessible(field);

				System.out.println(field.getName());
				
				if (field.isAnnotationPresent(DBRef.class) && field.isAnnotationPresent(MCCascadeSave.class)) {
					final Object fieldValue =  field.get(source.getSource());
					if (fieldValue == null) {
						return;
					}
					DbRefFieldCallback callback = new DbRefFieldCallback();
					
					if (field.getType().equals(List.class))
					{
						Type elementType = ((ParameterizedType) field.getGenericType()).getActualTypeArguments()[0];
						ReflectionUtils.doWithFields((Class) elementType, callback);
						if (!callback.isIdFound()) {
							throw new MappingException("Cannot perform cascade save on child object without id set");
						}
						
						Iterator iterator = ((List) fieldValue).iterator();
						while(iterator.hasNext())
						{
							Object listItem = iterator.next();
							mongoOperations.save(listItem);
						}

					}else {

						ReflectionUtils.doWithFields(fieldValue.getClass(), callback);
						if (!callback.isIdFound()) {
							throw new MappingException("Cannot perform cascade save on child object without id set");
						}
						mongoOperations.save(fieldValue);
					}
				}
			}
		});
	}

	private static class DbRefFieldCallback implements ReflectionUtils.FieldCallback {
		private boolean idFound;

		public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {
			ReflectionUtils.makeAccessible(field);

			if (field.isAnnotationPresent(Id.class)) {
				idFound = true;
			}
		}

		public boolean isIdFound() {
			return idFound;
		}
	}

}
